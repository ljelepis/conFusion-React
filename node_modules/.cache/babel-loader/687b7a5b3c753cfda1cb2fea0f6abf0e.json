{"ast":null,"code":"import _objectSpread from \"/Users/lindsey/Desktop/NucampFolder/3-React/confusion/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { createForms } from 'react-redux-form';\nimport { Dishes } from './dishes';\nimport { Comments } from './comments';\nimport { Promotions } from './promotions';\nimport { Leaders } from './leaders';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport { InitialFeedback } from './forms'; //reducer and initialState was deleted inside createStore,\n//because all we need is combineReducers\n//inside this combineReducers we specify how to combine these four simpler Reducers we have defined up there.\n//After adding 4, we recomposed the global state for our application.\n//React redux form fills in all the details by itself, so we don't need reducers.\n//even if you reload your component, your form will stay the same.\n\nexport var ConfigureStore = function ConfigureStore() {\n  var store = createStore(combineReducers(_objectSpread({\n    dishes: Dishes,\n    comments: Comments,\n    promotions: Promotions,\n    leaders: Leaders\n  }, createForms({\n    feedback: InitialFeedback\n  }))), applyMiddleware(thunk, logger));\n  return store;\n};","map":{"version":3,"sources":["/Users/lindsey/Desktop/NucampFolder/3-React/confusion/src/redux/configureStore.js"],"names":["createStore","combineReducers","applyMiddleware","createForms","Dishes","Comments","Promotions","Leaders","thunk","logger","InitialFeedback","ConfigureStore","store","dishes","comments","promotions","leaders","feedback"],"mappings":";AAAA,SAAQA,WAAR,EAAqBC,eAArB,EAAsCC,eAAtC,QAA6D,OAA7D;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,eAAT,QAAgC,SAAhC,C,CAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAChC,MAAMC,KAAK,GAAGZ,WAAW,CACrBC,eAAe;AACXY,IAAAA,MAAM,EAAET,MADG;AAEXU,IAAAA,QAAQ,EAAET,QAFC;AAGXU,IAAAA,UAAU,EAAET,UAHD;AAIXU,IAAAA,OAAO,EAAET;AAJE,KAKRJ,WAAW,CAAC;AACXc,IAAAA,QAAQ,EAAEP;AADC,GAAD,CALH,EADM,EAUrBR,eAAe,CAACM,KAAD,EAAQC,MAAR,CAVM,CAAzB;AAaA,SAAOG,KAAP;AACH,CAfM","sourcesContent":["import {createStore, combineReducers, applyMiddleware } from 'redux';\nimport { createForms } from 'react-redux-form';\nimport { Dishes } from './dishes';\nimport { Comments } from './comments';\nimport { Promotions } from './promotions';\nimport { Leaders } from './leaders';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport { InitialFeedback } from './forms';\n\n//reducer and initialState was deleted inside createStore,\n//because all we need is combineReducers\n//inside this combineReducers we specify how to combine these four simpler Reducers we have defined up there.\n//After adding 4, we recomposed the global state for our application.\n//React redux form fills in all the details by itself, so we don't need reducers.\n//even if you reload your component, your form will stay the same.\n\nexport const ConfigureStore = () => {\n    const store = createStore(\n        combineReducers({\n            dishes: Dishes,\n            comments: Comments,\n            promotions: Promotions,\n            leaders: Leaders,\n            ...createForms({\n                feedback: InitialFeedback\n            })\n        }),\n        applyMiddleware(thunk, logger)\n    );\n\n    return store;\n}"]},"metadata":{},"sourceType":"module"}